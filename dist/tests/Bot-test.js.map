{"version":3,"sources":["../../src/tests/Bot-test.js"],"names":["token","process","env","PAGE_ACCESS_TOKEN","describe","bot","Bot","it","once","message","sender","fetch","assert","equal","first_name","last_name","fromCache","done","handleMessage","text","entry","messaging","images","image","attachments","payload","url"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQC,GAAR,CAAYC,iBAA1B;;AAEAC,SAAS,KAAT,EAAgB,YAAM;AACpB,MAAMC,MAAM,IAAIC,KAAJ,CAAQN,KAAR,CAAZ;;AAEA,MAAIA,KAAJ,EAAW;AACTO,OAAG,2BAAH,EAAgC,gBAAQ;AACtCF,UAAIG,IAAJ,CAAS,SAAT;AAAA,qFAAoB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,wBADU,GACCD,OADD,CACVC,MADU;AAAA;AAAA,yBAEZA,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CAFY;;AAAA;;AAIlBC,mCAAOC,KAAP,CAAaH,OAAOI,UAApB,EAAgC,QAAhC;AACAF,mCAAOC,KAAP,CAAaH,OAAOK,SAApB,EAA+B,QAA/B;AACAH,mCAAOC,KAAP,CAAaH,OAAOM,SAApB,EAA+B,KAA/B;;AANkB;AAAA,yBAQZN,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CARY;;AAAA;AASlBC,mCAAOC,KAAP,CAAaH,OAAOM,SAApB,EAA+B,IAA/B;AACAC;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;;AAAA;AAAA;AAAA;AAAA;;AAaAZ,UAAIa,aAAJ,CAAkBC,cAAlB;AACD,KAfD;AAgBD;;AAEDZ,KAAG,qBAAH,EAA0B,gBAAQ;AAChCF,QAAIG,IAAJ,CAAS,SAAT;AAAA,oFAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClBG,iCAAOC,KAAP,CAAaJ,QAAQU,IAArB,EAA2BA,eAAKC,KAAL,CAAW,CAAX,EAAcC,SAAd,CAAwB,CAAxB,EAA2BZ,OAA3B,CAAmCU,IAA9D;AACAF;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,QAAIa,aAAJ,CAAkBC,cAAlB;AACD,GAPD;;AASAZ,KAAG,uBAAH,EAA4B,gBAAQ;AAClCF,QAAIG,IAAJ,CAAS,SAAT;AAAA,oFAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClBG,iCAAOC,KAAP,CACEJ,QAAQa,MAAR,CAAe,CAAf,CADF,EAEEC,gBAAMH,KAAN,CAAY,CAAZ,EAAeC,SAAf,CAAyB,CAAzB,EAA4BZ,OAA5B,CAAoCe,WAApC,CAAgD,CAAhD,EAAmDC,OAAnD,CAA2DC,GAF7D;AAIAT;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAQAZ,QAAIa,aAAJ,CAAkBK,eAAlB;AACD,GAVD;AAWD,CA1CD","file":"Bot-test.js","sourcesContent":["import assert from \"assert\";\nimport { Bot } from \"../..\";\nimport text from \"../../fixtures/text.json\";\nimport image from \"../../fixtures/image.json\";\n\nconst token = process.env.PAGE_ACCESS_TOKEN;\n\ndescribe(\"Bot\", () => {\n  const bot = new Bot(token);\n\n  if (token) {\n    it(\"should fetch user profile\", done => {\n      bot.once(\"message\", async message => {\n        const { sender } = message;\n        await sender.fetch(\"first_name,last_name\", true);\n\n        assert.equal(sender.first_name, \"Mathew\");\n        assert.equal(sender.last_name, \"Kurian\");\n        assert.equal(sender.fromCache, false);\n\n        await sender.fetch(\"first_name,last_name\", true);\n        assert.equal(sender.fromCache, true);\n        done();\n      });\n\n      bot.handleMessage(text);\n    });\n  }\n\n  it(\"should extract text\", done => {\n    bot.once(\"message\", async message => {\n      assert.equal(message.text, text.entry[0].messaging[0].message.text);\n      done();\n    });\n\n    bot.handleMessage(text);\n  });\n\n  it(\"should extract images\", done => {\n    bot.once(\"message\", async message => {\n      assert.equal(\n        message.images[0],\n        image.entry[0].messaging[0].message.attachments[0].payload.url\n      );\n      done();\n    });\n\n    bot.handleMessage(image);\n  });\n});\n"]}