{"version":3,"sources":["../src/QuickReplies.js"],"names":["QuickReplies","_quickReplies","text","data","event","image","isLocation","Error","push","quickReplies","reply","contentType","payload","pill","title","String","content_type","length","array","quickreplies","forEach","add","arg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEMA,Y;AACJ,0BAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqB,EAArB;AACD;;;;8BAE2C;AAAA,UAAvCC,IAAuC,QAAvCA,IAAuC;AAAA,UAAjCC,IAAiC,QAAjCA,IAAiC;AAAA,UAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,UAApBC,KAAoB,QAApBA,KAAoB;AAAA,UAAbC,UAAa,QAAbA,UAAa;;AAC1C,UAAI,CAACH,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACE,UAAxB,EAAoC;AAClC,cAAMC,MAAM,qCAAN,CAAN;AACD;;AAED,WAAKN,aAAL,CAAmBO,IAAnB,CAAwB,EAACN,MAAMA,QAAQ,YAAf,EAA6BE,YAA7B,EAAoCD,UAApC,EAA0CE,YAA1C,EAAiDC,sBAAjD,EAAxB;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAMG,eAAe,EAArB;AADO;AAAA;AAAA;;AAAA;AAEP,wDAAoB,KAAKR,aAAzB,4GAAwC;AAAA,cAA7BS,KAA6B;;AACtC,cAAIC,cAAc,MAAlB;AACA,cAAMC,UAAU,yBAAe,EAACT,MAAMO,MAAMP,IAAb,EAAmBC,OAAOM,MAAMN,KAAhC,EAAf,CAAhB;AACA,cAAI,CAACM,MAAMR,IAAX,EAAiB;AACf,kBAAM,IAAIK,KAAJ,CAAU,mBAAV,CAAN;AACD;AACD,cAAIG,MAAMJ,UAAV,EAAsB;AACpBK,0BAAc,UAAd;AACD;AACD,cAAIE,OAAO,EAACD,gBAAD,EAAUE,OAAO,gBAAIC,OAAOL,MAAMR,IAAb,CAAJ,EAAwB,EAAxB,CAAjB,EAA8Cc,cAAcL,WAA5D,EAAX;AACA,cAAID,MAAML,KAAV,EAAiB;AACfQ,iBAAKR,KAAL,GAAaK,MAAML,KAAnB;AACD;AACDI,uBAAaD,IAAb,CAAkBK,IAAlB;AACD;AAhBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBP,aAAOJ,YAAP;AACD;;;wBAQY;AACX,aAAO,KAAKR,aAAL,CAAmBgB,MAA1B;AACD;;;yBARWC,K,EAAO;AACjB,UAAMC,eAAe,IAAInB,YAAJ,EAArB;AACAkB,YAAME,OAAN,CAAc;AAAA,eAAOD,aAAaE,GAAb,CAAiBC,GAAjB,CAAP;AAAA,OAAd;AACA,aAAOH,YAAP;AACD;;;;;kBAOYnB,Y","file":"QuickReplies.js","sourcesContent":["import {cut} from './libs/utils';\r\n\r\nclass QuickReplies {\r\n  constructor() {\r\n    this._quickReplies = [];\r\n  }\r\n\r\n  add({text, data, event, image, isLocation}) {\r\n    if (!data && !event && !isLocation) {\r\n      throw Error('Must provide data i.e. {data: null}');\r\n    }\r\n\r\n    this._quickReplies.push({text: text || 'QuickReply', event, data, image, isLocation});\r\n    return this;\r\n  }\r\n\r\n  toJSON() {\r\n    const quickReplies = [];\r\n    for (const reply of this._quickReplies) {\r\n      let contentType = 'text';\r\n      const payload = JSON.stringify({data: reply.data, event: reply.event});\r\n      if (!reply.text) {\r\n        throw new Error('No text attribute');\r\n      }\r\n      if (reply.isLocation) {\r\n        contentType = 'location';\r\n      }\r\n      let pill = {payload, title: cut(String(reply.text), 20), content_type: contentType};\r\n      if (reply.image) {\r\n        pill.image = reply.image;\r\n      }\r\n      quickReplies.push(pill);\r\n    }\r\n\r\n    return quickReplies;\r\n  }\r\n\r\n  static from(array) {\r\n    const quickreplies = new QuickReplies();\r\n    array.forEach(arg => quickreplies.add(arg));\r\n    return quickreplies;\r\n  }\r\n\r\n  get length() {\r\n    return this._quickReplies.length;\r\n  }\r\n}\r\n\r\nexport default QuickReplies;\r\n"]}