{"version":3,"sources":["../src/QuickReplies.js"],"names":["QuickReplies","quickreplies","_quickReplies","Array","isArray","forEach","add","reply","text","data","event","image","isLocation","Error","push","quickReplies","contentType","payload","pill","title","String","content_type","image_url","length","array","arg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEMA,Y;AACJ,wBAAYC,YAAZ,EAA0B;AAAA;;AAAA;;AACxB,SAAKC,aAAL,GAAqB,EAArB;;AAEA,QAAID,gBAAgB,IAApB,EAA0B;AACxB,UAAIE,MAAMC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;AAC/BA,qBAAaI,OAAb,CAAqB;AAAA,iBAAS,MAAKC,GAAL,CAASC,KAAT,CAAT;AAAA,SAArB;AACD,OAFD,MAEO;AACL,aAAKD,GAAL,CAASL,YAAT;AACD;AACF;AACF;;;;8BAE2C;AAAA,UAAvCO,IAAuC,QAAvCA,IAAuC;AAAA,UAAjCC,IAAiC,QAAjCA,IAAiC;AAAA,UAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,UAApBC,KAAoB,QAApBA,KAAoB;AAAA,UAAbC,UAAa,QAAbA,UAAa;;AAC1C,UAAI,CAACH,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACE,UAAxB,EAAoC;AAClC,cAAMC,MAAM,qCAAN,CAAN;AACD;;AAED,WAAKX,aAAL,CAAmBY,IAAnB,CAAwB,EAACN,MAAMA,IAAP,EAAaE,YAAb,EAAoBD,UAApB,EAA0BE,YAA1B,EAAiCC,sBAAjC,EAAxB;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAMG,eAAe,EAArB;AADO;AAAA;AAAA;;AAAA;AAEP,wDAAoB,KAAKb,aAAzB,4GAAwC;AAAA,cAA7BK,KAA6B;;AACtC,cAAIS,cAAc,MAAlB;AACA,cAAMC,UAAU,yBAAe,EAACR,MAAMF,MAAME,IAAb,EAAmBC,OAAOH,MAAMG,KAAhC,EAAf,CAAhB;AACA,cAAI,CAACH,MAAMC,IAAX,EAAiB;AACf,kBAAM,IAAIK,KAAJ,CAAU,mBAAV,CAAN;AACD;AACD,cAAIN,MAAMK,UAAV,EAAsB;AACpBI,0BAAc,UAAd;AACD;AACD,cAAIE,OAAO,EAACD,gBAAD,EAAUE,OAAO,gBAAIC,OAAOb,MAAMC,IAAb,CAAJ,EAAwB,EAAxB,CAAjB,EAA8Ca,cAAcL,WAA5D,EAAX;AACA,cAAIT,MAAMI,KAAV,EAAiB;AACfO,iBAAKI,SAAL,GAAiBf,MAAMI,KAAvB;AACD;AACDI,uBAAaD,IAAb,CAAkBI,IAAlB;AACD;AAhBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBP,aAAOH,YAAP;AACD;;;wBAQY;AACX,aAAO,KAAKb,aAAL,CAAmBqB,MAA1B;AACD;;;yBARWC,K,EAAO;AACjB,UAAMvB,eAAe,IAAID,YAAJ,EAArB;AACAwB,YAAMnB,OAAN,CAAc;AAAA,eAAOJ,aAAaK,GAAb,CAAiBmB,GAAjB,CAAP;AAAA,OAAd;AACA,aAAOxB,YAAP;AACD;;;;;kBAOYD,Y","file":"QuickReplies.js","sourcesContent":["import {cut} from './libs/utils';\n\nclass QuickReplies {\n  constructor(quickreplies) {\n    this._quickReplies = [];\n\n    if (quickreplies != null) {\n      if (Array.isArray(quickreplies)) {\n        quickreplies.forEach(reply => this.add(reply));\n      } else {\n        this.add(quickreplies);\n      }\n    }\n  }\n\n  add({text, data, event, image, isLocation}) {\n    if (!data && !event && !isLocation) {\n      throw Error('Must provide data i.e. {data: null}');\n    }\n\n    this._quickReplies.push({text: text, event, data, image, isLocation});\n    return this;\n  }\n\n  toJSON() {\n    const quickReplies = [];\n    for (const reply of this._quickReplies) {\n      let contentType = 'text';\n      const payload = JSON.stringify({data: reply.data, event: reply.event});\n      if (!reply.text) {\n        throw new Error('No text attribute');\n      }\n      if (reply.isLocation) {\n        contentType = 'location';\n      }\n      let pill = {payload, title: cut(String(reply.text), 20), content_type: contentType};\n      if (reply.image) {\n        pill.image_url = reply.image;\n      }\n      quickReplies.push(pill);\n    }\n\n    return quickReplies;\n  }\n\n  static from(array) {\n    const quickreplies = new QuickReplies();\n    array.forEach(arg => quickreplies.add(arg));\n    return quickreplies;\n  }\n\n  get length() {\n    return this._quickReplies.length;\n  }\n}\n\nexport default QuickReplies;\n"]}