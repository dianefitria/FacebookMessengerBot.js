{"version":3,"sources":["../src/QuickReplies.js"],"names":["QuickReplies","quickreplies","_quickReplies","Array","isArray","forEach","add","reply","text","data","event","image","isLocation","options","console","log","push","quickReplies","contentType","payload","Error","pill","title","String","content_type","image_url","length","array","arg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEMA,Y;AACJ,wBAAYC,YAAZ,EAA0B;AAAA;;AAAA;;AACxB,SAAKC,aAAL,GAAqB,EAArB;;AAEA,QAAID,gBAAgB,IAApB,EAA0B;AACxB,UAAIE,MAAMC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;AAC/BA,qBAAaI,OAAb,CAAqB;AAAA,iBAAS,MAAKC,GAAL,CAASC,KAAT,CAAT;AAAA,SAArB;AACD,OAFD,MAEO;AACL,aAAKD,GAAL,CAASL,YAAT;AACD;AACF;AACF;;;;8BAEsD;AAAA,UAAjDO,IAAiD,QAAjDA,IAAiD;AAAA,UAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,UAArCC,KAAqC,QAArCA,KAAqC;AAAA,UAA9BC,KAA8B,QAA9BA,KAA8B;AAAA,UAAvBC,UAAuB,QAAvBA,UAAuB;AAAA,UAAXC,OAAW,QAAXA,OAAW;;AACrD,UAAI,CAACJ,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACE,UAAxB,EAAoC;AAClCE,gBAAQC,GAAR,CAAY,qCAAZ;AACA;AACD;;AAED,WAAKb,aAAL,CAAmBc,IAAnB,CAAwB;AACtBR,cAAMA,IADgB;AAEtBE,oBAFsB;AAGtBD,kBAHsB;AAItBE,oBAJsB;AAKtBC,8BALsB;AAMtBC;AANsB,OAAxB;AAQA,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAMI,eAAe,EAArB;AADO;AAAA;AAAA;;AAAA;AAEP,wDAAoB,KAAKf,aAAzB,4GAAwC;AAAA,cAA7BK,KAA6B;;AACtC,cAAIW,cAAc,MAAlB;AACA,cAAMC,UAAU,yBAAe,EAAEV,MAAMF,MAAME,IAAd,EAAoBC,OAAOH,MAAMG,KAAjC,EAAf,CAAhB;AACA,cAAI,CAACH,MAAMC,IAAX,EAAiB;AACf,kBAAM,IAAIY,KAAJ,CAAU,mBAAV,CAAN;AACD;AACD,cAAIb,MAAMK,UAAV,EAAsB;AACpBM,0BAAc,UAAd;AACD;AACD,cAAIG,OAAO;AACTF,4BADS;AAETG,mBAAO,gBAAIC,OAAOhB,MAAMC,IAAb,CAAJ,EAAwB,EAAxB,CAFE;AAGTgB,0BAAcN;AAHL,WAAX;AAKA,cAAIX,MAAMI,KAAV,EAAiB;AACfU,iBAAKI,SAAL,GAAiBlB,MAAMI,KAAvB;AACD;AACDM,uBAAaD,IAAb,CAAkBK,IAAlB;AACD;AApBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBP,aAAOJ,YAAP;AACD;;;wBAQY;AACX,aAAO,KAAKf,aAAL,CAAmBwB,MAA1B;AACD;;;yBARWC,K,EAAO;AACjB,UAAM1B,eAAe,IAAID,YAAJ,EAArB;AACA2B,YAAMtB,OAAN,CAAc;AAAA,eAAOJ,aAAaK,GAAb,CAAiBsB,GAAjB,CAAP;AAAA,OAAd;AACA,aAAO3B,YAAP;AACD;;;;;kBAOYD,Y","file":"QuickReplies.js","sourcesContent":["import { cut } from \"./libs/utils\";\n\nclass QuickReplies {\n  constructor(quickreplies) {\n    this._quickReplies = [];\n\n    if (quickreplies != null) {\n      if (Array.isArray(quickreplies)) {\n        quickreplies.forEach(reply => this.add(reply));\n      } else {\n        this.add(quickreplies);\n      }\n    }\n  }\n\n  add({ text, data, event, image, isLocation, options }) {\n    if (!data && !event && !isLocation) {\n      console.log(\"Must provide data i.e. {data: null}\");\n      return;\n    }\n\n    this._quickReplies.push({\n      text: text,\n      event,\n      data,\n      image,\n      isLocation,\n      options\n    });\n    return this;\n  }\n\n  toJSON() {\n    const quickReplies = [];\n    for (const reply of this._quickReplies) {\n      let contentType = \"text\";\n      const payload = JSON.stringify({ data: reply.data, event: reply.event });\n      if (!reply.text) {\n        throw new Error(\"No text attribute\");\n      }\n      if (reply.isLocation) {\n        contentType = \"location\";\n      }\n      let pill = {\n        payload,\n        title: cut(String(reply.text), 20),\n        content_type: contentType\n      };\n      if (reply.image) {\n        pill.image_url = reply.image;\n      }\n      quickReplies.push(pill);\n    }\n\n    return quickReplies;\n  }\n\n  static from(array) {\n    const quickreplies = new QuickReplies();\n    array.forEach(arg => quickreplies.add(arg));\n    return quickreplies;\n  }\n\n  get length() {\n    return this._quickReplies.length;\n  }\n}\n\nexport default QuickReplies;\n"]}